<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java笔记（一）：进制表示、Equals、增强for循环、方法基础</title>
      <link href="/2022/03/07/Java%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%E3%80%81Equals%E3%80%81%E5%A2%9E%E5%BC%BAfor%E5%BE%AA%E7%8E%AF%E3%80%81%E6%96%B9%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/03/07/Java%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%E3%80%81Equals%E3%80%81%E5%A2%9E%E5%BC%BAfor%E5%BE%AA%E7%8E%AF%E3%80%81%E6%96%B9%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="进制表示"><a href="#进制表示" class="headerlink" title="进制表示"></a>进制表示</h2><p>二进制0b 十进制 八进制0 十六进制0x</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span>  <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">010</span>;  <span class="comment">//八进制0 </span></span><br><span class="line"><span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">0x10</span>; <span class="comment">//十六进制0x</span></span><br></pre></td></tr></table></figure><p>out:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 3 16</span><br></pre></td></tr></table></figure><h2 id="Equals"><a href="#Equals" class="headerlink" title="Equals"></a>Equals</h2><p><code>.equals</code>方法可以用来判断字符串是否相等。</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(str.equals(<span class="string">&quot;Hello&quot;</span>))&#123; <span class="comment">//判断str是否与Hello相等</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h2><p>主要用于数组或集合的增强型for循环。</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] nums = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增强for循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x: nums)&#123;<span class="comment">//遍历数组元素</span></span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下面是用普通的for表示</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">    System.out.println(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法基础"><a href="#方法基础" class="headerlink" title="方法基础"></a>方法基础</h2><h3 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h3><p>Java的方法跟其他语言的函数类似。</p><p>方法的结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型 参数名)&#123;</span><br><span class="line">...</span><br><span class="line">方法体</span><br><span class="line">...</span><br><span class="line"><span class="keyword">return</span> 返回值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><h4 id="访问控制修饰符"><a href="#访问控制修饰符" class="headerlink" title="访问控制修饰符"></a>访问控制修饰符</h4><p><strong>default</strong> (即默认，什么也不写）：在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。<br><strong>private</strong>：在同一类内可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong><br><strong>public</strong>：对所有类可见。使用对象：类、接口、变量、方法<br><strong>protected</strong>：对同一包内的类和所有子类可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong>。</p><h4 id="非访问修饰符"><a href="#非访问修饰符" class="headerlink" title="非访问修饰符"></a>非访问修饰符</h4><p><strong>static</strong>：用来修饰类方法和类变量。<br><strong>final</strong>：用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。<br><strong>abstract</strong>：用来创建抽象类和抽象方法。<br><strong>synchronized、volatile</strong> ：主要用于线程的编程。</p><h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h3><p>在同一个类中，有相同的函数名字，但形参不同的函数。</p><p>例：构建一个比较大小的方法<code>max</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(max(<span class="number">10</span>,<span class="number">20</span>));    <span class="comment">//调用的是第一个方法</span></span><br><span class="line">System.out.println(max(<span class="number">10.0</span>,<span class="number">20.0</span>));<span class="comment">//调用的是第二个方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (num1 &gt; num2)</span><br><span class="line">        <span class="keyword">return</span> num1;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span> num1, <span class="type">double</span> num2)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (num1 &gt; num2)</span><br><span class="line">    <span class="keyword">return</span> num1;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法重载的规则：</p><ol><li>方法名称必须相同。</li><li>参数列表必须不同。</li><li>返回值类型可以相同，也可以不同。</li><li>仅仅返回值不同不构成方法的重载。</li></ol><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>Java支持传递同类型的可变参数给一个方法。</p><p>使用方法：</p><p>在方法声明中，在指定参数类型后加一个省略号(…) 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">参数类型... 参数名</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明。</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoVarargs</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DemoVarargs</span> <span class="variable">demoVarargs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DemoVarargs</span>();</span><br><span class="line">        demoVarargs.printMax(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        demoVarargs.printMax(<span class="keyword">new</span> <span class="title class_">double</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printMax</span><span class="params">(<span class="type">double</span>... nums)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;No argument passed&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> <span class="variable">max</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">double</span> x: nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x &gt; max)&#123;</span><br><span class="line">                max = x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;max:&quot;</span> + max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统目录</title>
      <link href="/2022/03/06/Linux%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95/"/>
      <url>/2022/03/06/Linux%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h2><p>存放着整个系统必须的二进制文件或可执行文件</p><p>可以随时通过命令行运行这些二进制文件</p><h2 id="sbin"><a href="#sbin" class="headerlink" title="sbin"></a>sbin</h2><p>存放着仅可由root用户运行的系统二进制文件</p><h2 id="lib"><a href="#lib" class="headerlink" title="lib"></a>lib</h2><p>二进制文件的公共库</p><h2 id="usr"><a href="#usr" class="headerlink" title="usr"></a>usr</h2><h3 id="bin-1"><a href="#bin-1" class="headerlink" title="bin"></a>bin</h3><p>usr文件夹下存放的各自的bin和sbin目录，但它并不是操作系统必须的</p><h3 id="local"><a href="#local" class="headerlink" title="local"></a>local</h3><p>存放着手动编译的二进制文件，为一个安全区，与包管理器安装的软件发生冲突</p><h2 id="PATH"><a href="#PATH" class="headerlink" title="$PATH"></a>$PATH</h2><p>$PATH环境变量包含了由包管理器安装的二进制文件的位置</p><h2 id="etc"><a href="#etc" class="headerlink" title="etc"></a>etc</h2><p>配置系统中文件的具体行为，内包含了可编辑文本配置文件</p><h2 id="home"><a href="#home" class="headerlink" title="home"></a>home</h2><p>home目录下可以找到系统内注册的每一个用户的文件，配置和软件</p><h2 id="boot"><a href="#boot" class="headerlink" title="boot"></a>boot</h2><p>包含系统启动所需的文件，如内核等</p><h2 id="dev"><a href="#dev" class="headerlink" title="dev"></a>dev</h2><p>设备文件，管理硬件和驱动程序，可以在此创建硬盘分区</p><h2 id="opt"><a href="#opt" class="headerlink" title="opt"></a>opt</h2><p>包含可选软件和软件包</p><h2 id="var"><a href="#var" class="headerlink" title="var"></a>var</h2><p>存放着操作系统使用过程中会发生变化的文件</p><h2 id="tmp"><a href="#tmp" class="headerlink" title="tmp"></a>tmp</h2><p>临时文件</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GCC、GDB食用方法</title>
      <link href="/2022/03/06/GCC%E3%80%81GDB%E9%A3%9F%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2022/03/06/GCC%E3%80%81GDB%E9%A3%9F%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="GCC"><a href="#GCC" class="headerlink" title="GCC"></a>GCC</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -Wall -o test test.c</span><br></pre></td></tr></table></figure><p><code>-o</code>自定义目标文件</p><p><code>-Wall</code>自动提示一些出错警告的信息</p><h2 id="GDB"><a href="#GDB" class="headerlink" title="GDB"></a>GDB</h2><p>在GCC编译时需要添加一个参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -ggdb3 -Wall -o test test.c</span><br></pre></td></tr></table></figure><p>如无报错，即可启动GDB：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb test</span><br></pre></td></tr></table></figure><h3 id="GDB指令"><a href="#GDB指令" class="headerlink" title="GDB指令"></a>GDB指令</h3><p><code>break 10</code>在第十行设置断点。</p><p><code>break test</code>在<code>test</code>函数处设置断点</p><p><code>s / step</code>下一步</p><p><code>c / continue</code>当程序在某一断点处停止后，用该指令可以继续执行，直至遇到断点或者程序结束</p><p><code>u / until</code> 运行程序直到退出循环体</p><p><code>r / run</code>运行</p><p><code>q / quit</code>结束调试</p><p><code>p / print</code>显示某个变量的值</p><p><code>p *array@len</code> 输出数组</p><p><code>enable</code> 恢复失效的断点</p><p><code>disable </code>使断点失效</p><p><code>clear</code> 清除断点</p><p><code>bt / backtrace </code>查看堆栈信息</p><p><code>watch</code>监测某变量或表达式，当发生变化时停止</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora借助Gitee+PicGo-Core实现云图床</title>
      <link href="/2022/03/06/Typora-Gitee-PicgoCore%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/03/06/Typora-Gitee-PicgoCore%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="云图床搭建"><a href="#云图床搭建" class="headerlink" title="云图床搭建"></a>云图床搭建</h2><p>这次我们选择的云图床的搭建是基于gitee。gitee服务器位于国内，避免了github被墙的等一系列问题。</p><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p>（省略gitee账号创建的过程，如果这都不会，建议不要折腾了）我们看到gitee页面右上角那个加号，然后点击新建仓库。</p><p><img src="https://gitee.com/icewindy/note-img/raw/master/note/20220112213354.png" alt="image-20220112213353460"></p><p>然后输入你自己想要的仓库名称，路径会自动生成跟你仓库名称一样的名称，当然你也可以自己自定义路径名称。</p><p>勾选上开源和设置模板、Readme文件，省去后面初始化的步骤，即可创建好你的仓库。</p><p><img src="https://gitee.com/icewindy/note-img/raw/master/note/20220112213557.png" alt="image-20220112213556929"></p><h3 id="密钥生成"><a href="#密钥生成" class="headerlink" title="密钥生成"></a>密钥生成</h3><p>点击你的头像，进入设置。</p><p><img src="https://gitee.com/icewindy/note-img/raw/master/note/20220112214030.png" alt="image-20220112214029486"></p><p>看到安全设置&#x2F;私人密钥。</p><p><img src="https://gitee.com/icewindy/note-img/raw/master/note/20220112214120.png" alt="image-20220112214119534"></p><p>点击“生成新令牌”</p><p><img src="https://gitee.com/icewindy/note-img/raw/master/note/20220112214157.png" alt="image-20220112214157037"></p><p><img src="https://gitee.com/icewindy/note-img/raw/master/note/20220112214214.png" alt="image-20220112214213174"></p><p>填上上描述，勾选上“projects”，生成一串密钥。</p><p><strong>注意：该密钥只会显示一次，注意好保存！！！</strong></p><h2 id="PicGO-Core配置"><a href="#PicGO-Core配置" class="headerlink" title="PicGO-Core配置"></a>PicGO-Core配置</h2><p>接下来我们就来配置PicGo-Core，至于为什么使用Core这种命令行版本，而不使用app这种带ui，是因为我不想在后台开多一个软件。</p><h3 id="配置Typora"><a href="#配置Typora" class="headerlink" title="配置Typora"></a>配置Typora</h3><p>点击“文件” “偏好设置” “图像”。</p><p>将“插入图片时候…”修改为“上传图片”，接着将上传服务修改为”PicGO-Core (command line)”，然后点击下载或更新，等他进度条走完。</p><p><img src="https://gitee.com/icewindy/note-img/raw/master/note/20220112214915.png" alt="image-20220112214914458"></p><p>接着点击验证图片上传选项，出现下面窗口。</p><p><img src="https://gitee.com/icewindy/note-img/raw/master/note/20220112215312.png" alt="image-20220112215311393"></p><p>复制前面一长串类似于“ C:\Users\IceWindy\AppData\Roaming\Typora\picgo\win64\picgo.exe”。</p><h3 id="PicGo-Core插件安装与配置"><a href="#PicGo-Core插件安装与配置" class="headerlink" title="PicGo-Core插件安装与配置"></a>PicGo-Core插件安装与配置</h3><p>打开你的命令行（cmd)，运行如下命令：<strong>（注意：需要安装Node.js！）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd C:\Users\IceWindy\AppData\Roaming\Typora\picgo\win64\picgo.exe</span><br><span class="line">.\picgo.exe install gitee-uploader</span><br><span class="line">.\picgo.exe install super-prefix </span><br></pre></td></tr></table></figure><p>在Typora图像设置中，点击打开配置文件，我们就打开了一个json格式的文件，按照我下面的样式填写</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;picBed&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;uploader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gitee&quot;</span><span class="punctuation">,</span><span class="comment">//当前上传的图床</span></span><br><span class="line">    <span class="attr">&quot;gitee&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;repo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icewindy/note-img&quot;</span><span class="punctuation">,</span><span class="comment">//仓库位置</span></span><br><span class="line">      <span class="attr">&quot;branch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;master&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="comment">//我们上文提到的生成的gitee密钥</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;note&quot;</span><span class="punctuation">,</span><span class="comment">//上传到你的仓库的文件夹</span></span><br><span class="line">      <span class="attr">&quot;customPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;default&quot;</span><span class="punctuation">,</span><span class="comment">//默认即可</span></span><br><span class="line">      <span class="attr">&quot;customUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;picgoPlugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;picgo-plugin-gitee-uploader&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;picgo-plugin-super-prefix&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="comment">//插件的启用</span></span><br><span class="line">  <span class="attr">&quot;picgo-plugin-super-prefix&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;fileFormat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;YYYYMMDDHHmmss&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="comment">//这段是配置时间戳插件的</span></span><br><span class="line">  <span class="attr">&quot;picgo-plugin-gitee-uploader&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;lastSync&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-01-12 10:05:31&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>仓库的位置可以打开你仓库的链接，“icewindy&#x2F;note-img”这地方就是你的仓库位置。</p><p><img src="https://gitee.com/icewindy/note-img/raw/master/note/20220112220530.png" alt="20220112220530"></p><h2 id="验证是否成功"><a href="#验证是否成功" class="headerlink" title="验证是否成功"></a>验证是否成功</h2><p>还是打开Typora的图像设置，点击验证图片上传选项，如图即成功。</p><p><img src="https://gitee.com/icewindy/note-img/raw/master/note/20220112222001.png" alt="image-20220112222000592"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
